from absl import flags

# --- predict ---
flags.DEFINE_string('model_name', 'val_best', help='Name of model which should get used for generating predictions.')
flags.DEFINE_string('output_path', None, help='Path to folder where outputs should get saved.')
flags.DEFINE_integer('prediction_number', None, help='Number of files for which predictions should get generated.')
flags.DEFINE_bool('immediate_evaluation', True, help='Do not save predictions, but evaluate them immediately and save images and reports to file.')
flags.DEFINE_boolean('make_cloud_mask_binary', False, help='Make cloud mask prediction binary by using 0.5 as the threshold.')
flags.DEFINE_boolean('to_file', True, help='Save predictions as images.')
flags.DEFINE_integer('label_dilation', 10, help='Size of ground truth label dilation for better visualization.')

# --- train ---
flags.DEFINE_string('data_path', '/storage/group/dataset_mirrors/01_incoming/satellite/Cumulo/clean/', help='Folder where nc files are located.')
flags.DEFINE_string('model_path', None, help='Model path / Training folder.')
flags.DEFINE_string('filetype', 'nc', help='File type for dataset.')
flags.DEFINE_integer('random_seed', 1, help='Random seed for reproducible trainings.')
flags.DEFINE_integer('epoch_number', 200, help='Number of epochs the training should last.')
flags.DEFINE_integer('worker_number', 4, help='Number of workers for the dataloader.')
flags.DEFINE_integer('dummy_batch_size', 1, help='Batch size used by the PyTorch DataLoader. Should be 1 as the CumuloDataset already returns batched inputs.')
flags.DEFINE_integer('batch_size', 16, help='Batch size for training and validation.')
flags.DEFINE_integer('file_number', None, help='Number of files which should get used for training, evaluation and testing.')
flags.DEFINE_integer('tile_size', 256, help='Tile size.')
flags.DEFINE_integer('class_number', 9, help='Number of classes.')
flags.DEFINE_bool('use_validation', True, help='Flag for performing validation after each epoch.')
flags.DEFINE_string('model', 'unet', help='Model type. One of [unet, equi, iresnet]. iresnet is experimental.')
flags.DEFINE_string('normalization', 'none', help='Type of normalization, one of [bn, gn, none]')
flags.DEFINE_bool('filter_cloudy_labels', False, help='Flag for only extracting tiles at cloudy labels. Sometimes there exist labels outside the cloud mask as well.')
flags.DEFINE_bool('save_examples', True, help='Save some training examples in each epoch')
flags.DEFINE_bool('demo', False, help='Use demo mode (only affects dataset splits.')
flags.DEFINE_bool('most_frequent_clouds_as_GT', True, help='Reduce the cloud type GT to the most frequent cloud type of all pixels. If False, the lowest cloud type is taken.')
flags.DEFINE_integer('analysis_frequency', 1, help='How often should training examples get saved and evaluation be performed? E.g. 2 for every second epoch.')
flags.DEFINE_integer('rotations', 4, help='Number of elements in rotation group')
flags.DEFINE_integer('valid_convolution_offset', 46, help='Cropping offset for labels in case of valid convolutions')
flags.DEFINE_integer('padding', 0, help='Padding for convolutions')
flags.DEFINE_integer('class_weight', 2, help='Weight of class loss')
flags.DEFINE_integer('mask_weight', 1, help='Weight of mask loss')
flags.DEFINE_integer('auto_weight', 0, help='Weight of auto loss')
flags.DEFINE_float('rotation_probability', 0.5, help='Augmentation probability')
flags.DEFINE_string('nc_exclude_path', '/storage/group/dataset_mirrors/01_incoming/satellite/Cumulo/clean/no_labels.pkl', help='Augmentation probability')

FLAGS = flags.FLAGS
